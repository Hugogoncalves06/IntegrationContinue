name: Build, Test and Deploy React Application

on:
  push:
    tags: 
      '*.*.*'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.x','21.x','22.x']
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Setup environment
        run: cp .env.dist .env
      - name: Install dependencies
        run: |
          npm ci
      - name: Run stack
        run: |
          docker compose -f docker-compose.yml up -d
          sleep 13
      - name: Run tests
        run: npm run test:coverage
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          flags: unittests-node:${{ matrix.node-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Stop the stack
        run: docker compose -f docker-compose.yml down

  # test-e2e:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: ['20.x','21.x','22.x']
  #   needs: test
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20.x
  #     - name: Setup environment
  #       run: cp .env.dist .env
  #     - name: Build the stack
  #       run: |
  #         docker compose -f docker-compose.yml up -d
  #         sleep 13
  #     - name: Run e2e tests with cypress
  #       uses: cypress-io/github-action@v6
          
  #     - name: Stop the stack
  #       run: docker compose -f docker-compose.yml down

  build_test:
    strategy:
      matrix:
        node-version: ['20.x','21.x']
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Setup environment
        run: cp .env.dist .env
      - name: Install and build
        run: |
          npm ci
          npm run jsdoc
          npm run build --if-present
      - name: Deploy to GitHub Pages
        id: pages
        uses: actions/configure-pages@v3
      - name : Upload Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: build.${{ matrix.node-version }}
          path: ./build

  build_deploy_npm:
    needs: [test, build_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Setup environment
        run: cp .env.prod .env
      - name: Authenticate with npm
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.PUBLISH_TOKEN }}" > ~/.npmrc
      - name: build and publish package on NPM
        run: |
          npm ci
          git config --global user.email "hugo.goncalves06@ynov.com"
          git config --global user.name "HugoGoncalves06"
          npm run build-npm
          npm version patch
          npm publish --access public

  deploy:
    needs: [test, build_test]
    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: cp .env.prod .env
      - name: Deploy to github pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: build.21.x

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, build_test]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: hugogoncalves06
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/hugogoncalves06/ci_cd_frontend_react_ynov
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  trigger-dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Fire event to api-nodejs
        run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.PERSONNAL_ACCESS_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/Hugogoncalves06/api-nodejs/dispatches \
          -d '{"event_type":"dispatch-event"}'
      - name: Fire event to Integration_continue_backend
        run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.PERSONNAL_ACCESS_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/Hugogoncalves06/Integration_continue_backend/dispatches \
          -d '{"event_type":"dispatch-event"}'
      - name: Fire event to terraform_config
        run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.PERSONNAL_ACCESS_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://github.com/Hugogoncalves06/terraform_config/dispatches \
          -d '{"event_type":"dispatch-event"}'